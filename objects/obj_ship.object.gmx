<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setting up player
/*
*   Setting the various global variables of the ship  
*/

event_inherited();
turn = 12;                   // The rate of turn (higher = faster)    
move_rate = 35; 
audio_play_sound(snd_effect_engine, 2, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unlock maneuvering controls
show_debug_message("THRUST: Unlocking maneuvering thrusters");
manuvering_lock = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Processing player stuff
upper_lock = false;
lower_lock = false;

if ( y &lt;= sprite_height )
{
    show_debug_message("UPPER BOUNDARY REACHED, ANGLE: " + string(image_angle));

    while (image_angle &gt; 0) {
        image_angle -= turn;
        ship_angle = image_angle;
        calculate_ship_speed();
    }
    upper_lock = true;
}
if ( y &gt;= room_height - sprite_height )
{
    show_debug_message("LOWER BOUNDARY REACHED, ANGLE: " + string(image_angle));

    while (image_angle &lt; 0) {
        image_angle += turn;
        ship_angle = image_angle;
        calculate_ship_speed();
    }
    show_debug_message("Lower locked");
    lower_lock = true;
}

if ( ( keyboard_check( ord('W') ) || keyboard_check( vk_up ) ) &amp;&amp; image_angle &lt; 45 &amp;&amp; !upper_lock)
{
    // Rotatin' left
    image_angle += turn;
    lower_lock = true;
}

if ( ( keyboard_check( ord('S') ) || keyboard_check( vk_down ) ) &amp;&amp; image_angle &gt; -45 &amp;&amp; !lower_lock )
{
    // Rotatin' right
    image_angle -= turn;
}

if ( ( ( keyboard_check( ord('W') ) || keyboard_check( vk_up ) ) &amp;&amp; !upper_lock ) 
        || ( ( keyboard_check( ord('S') ) || keyboard_check( vk_down ) ) &amp;&amp; !lower_lock ) )
{
    // Calculate motion based on angle
    ship_angle = image_angle;
    calculate_ship_speed();
}

show_debug_message("Y: " + string(y));


if ( place_meeting( x, y, obj_asteroid ) &amp;&amp; instance_exists(obj_ship) ) {
    // Aw dang we are dead THIS SUCKS :&lt;
    effect_create_above(ef_explosion, global.player.x, global.player.y, 2, c_yellow);
    audio_play_sound(snd_effect_explosion, 2, false);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
