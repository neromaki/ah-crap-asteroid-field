<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setting up player
/*
*   Setting the various global variables of the ship  
*/

event_inherited();

thrust = 0.15;              // The normal thrust rate
maneuver_thrust = 0.025;    // The reverse thrusters.. thrust
boost_thrust = 0.3;         // The booster's thrust rate
turn = 5;                   // The rate of turn (higher = faster)

max_speed = 5;                         // Overall max speed
max_thrust_speed = 5;                  // Max speed of regular thrusters
max_maneuvering_thrust_speed = 10;    // Max speed of reverse thrusters
max_booster_speed = 10;                // Max speed of boosters

boosters_enabled = false;               // Flag for whether the boosters are being fired
maneuvering_thrusters_enabled = false;  // Flag for whether reverse thrusters are being fired
    maneuvering_lock = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unlock maneuvering controls
show_debug_message("THRUST: Unlocking maneuvering thrusters");
manuvering_lock = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Processing player stuff

// ARE WE DEAD?!
if(self.health &lt;= 0) {
    // Aw dang we are :&lt;
    instance_destroy();
}

if ( keyboard_check( ord('W') ) || keyboard_check( vk_up ) )
{
    // GOING FORWARD
    motion_add(image_angle, thrust);    // Thrust away!
    
    var spr_x = lengthdir_x(-25, image_angle);
    var spr_y = lengthdir_y(-25, image_angle);
    effect_create_below(ef_smoke, x+spr_x, y+spr_y, 0, c_gray);
}
else if ( keyboard_check_released( ord('W') ) || keyboard_check_released( vk_up ) )
{
    friction = 0.01;    // Return friction to normal
}

if ( keyboard_check( ord('S') ) || keyboard_check( vk_down ) )
{
    // GOING BACKWARDS
    motion_add(image_angle - 180, thrust);    // REVERSE REVERSE
}
else if(keyboard_check(ord('S')) || keyboard_check(vk_down))
{
    friction = 0.01;    // Return friction to normal
}


if(keyboard_check(ord('A')) || keyboard_check(vk_left))
{
    // Rotatin' left
    image_angle += turn;
}
else if ( keyboard_check_released( ord('A') ) || keyboard_check_released( vk_left ) )
{
    friction = 0.01;    // Return friction to normal
}

if(keyboard_check(ord('D')) || keyboard_check(vk_right))
{
    // Rotatin' right
    image_angle -= turn;
}
else if ( keyboard_check_released( ord('D') ) || keyboard_check_released( vk_right ) )
{
    friction = 0.01;    // Return friction to normal
}


if ( keyboard_check_pressed( ord('Q') ) &amp;&amp; !maneuvering_lock )
{
    // Q fires portside strafe thrusters
    show_debug_message("THRUST: Firing portside thrusters");
    maneuvering_thrusters_enabled = true;
    maneuvering_lock = true;
    motion_add((image_angle+270), maneuver_thrust);  // Add thrust to the left
    alarm[11] = room_speed * 2;    
}

if ( keyboard_check_pressed( ord('E') ) &amp;&amp; !maneuvering_lock )
{
    // E fires broadside strafe thrusters
    show_debug_message("THRUST: Firing broadside thrusters");
    maneuvering_thrusters_enabled = true;
    motion_add((image_angle+90), maneuver_thrust);  // Add thrust to the right
    alarm[11] = room_speed * 2;    
}

/*
*   MOVEMENT CHECKS AND BALANCES
*/
// Adjust the max speed allowed of travel based on what type of thrusters are being fired
// (Normal, maneuver or boosters)
if(self.boosters_enabled) {
    max_speed = self.max_booster_speed;
} else if (self.maneuvering_thrusters_enabled) {
    max_speed = self.max_maneuvering_thrust_speed;
} else {
    max_speed = self.max_thrust_speed;
}

// If the player is travelling faster than the thruster's max speed..
if(speed &gt;= max_speed) { 
    // If they are using maneuvering thrusters, use a lesser friction for reduced rate of braking
    if(self.maneuvering_thrusters_enabled) {
        friction = 0.1;
    } else if(self.boosters_enabled) {
        friction = 0.3;
    } else {
        friction = 0.2;
    }
} else {    // If they've stopped breaking the technical speed capabilities of their craft, reduce the friction
    friction = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Some nice visual output on what we're doing
draw_set_colour(c_white);
draw_text(10,10, "speed:     " + string(speed) + 
                "#direction: " + string(direction) +
                "#facing:    " + string(image_angle) +
                "#friction:  " + string(friction) +
                "#thrust:    " + string(thrust));
                
var spr_x = lengthdir_x(-50, image_angle);
var spr_y = lengthdir_y(-50, image_angle);
draw_text(175, 10, "plyr");
draw_text(175, 30, x);
draw_text(175, 50, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
